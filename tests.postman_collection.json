{
	"info": {
		"_postman_id": "fe59918b-6fad-454c-aeb8-74a5bce0ce0b",
		"name": "Homework 7",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Scenario",
			"item": [
				{
					"name": "Initial logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 7570250,\n \"message\": \"ad dolor\"\n}"
						}
					]
				},
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [\"id\"]",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.collectionVariables.set(\"userId\", responseJSON[\"id\"])"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"login\", pm.variables.replaceIn('{{$randomUserName}}'))",
									"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"register"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"urn:uuid:75f05586-ccca-6fb5-cfce-373267b7ab4f\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"register"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 7570250,\n \"message\": \"ad dolor\"\n}"
						}
					]
				},
				{
					"name": "Login user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"login\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "bad request",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"login"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"login\": \"user1\",\n    \"password\": \"user1-pwd\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"login"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 7570250,\n \"message\": \"ad dolor\"\n}"
						}
					]
				},
				{
					"name": "initial account status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"amount\": {",
									"            \"type\": \"number\"",
									"        }",
									"    },",
									"    \"required\": [\"amount\"]",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.test(\"Initial account amount should be 0\", function() {",
									"    pm.expect(responseJSON[\"amount\"]).to.eql(0)",
									"})",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// wait 1 second to be sure billing account created",
									"setTimeout(function() {}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/billing/api/v1/account",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"api",
								"v1",
								"account"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"amount\": 68993046.62\n}"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						}
					]
				},
				{
					"name": "Top up an account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"accountAmount\", pm.variables.replaceIn('1000'))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": {{accountAmount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/billing/api/v1/account",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"api",
								"v1",
								"account"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 3191070.63\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 3191070.63\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"amount\": 3191070.63\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						}
					]
				},
				{
					"name": "Account status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"amount\": {",
									"            \"type\": \"number\"",
									"        }",
									"    },",
									"    \"required\": [\"amount\"]",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.test(\"Account amount should be equal to \" + pm.collectionVariables.get(\"accountAmount\"), function() {",
									"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(pm.collectionVariables.get(\"accountAmount\")));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/billing/api/v1/account",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"api",
								"v1",
								"account"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"amount\": 68993046.62\n}"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						}
					]
				},
				{
					"name": "Initial notifications check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"type\": {",
									"                \"type\": \"string\",",
									"                \"enum\": [",
									"                    \"OrderConfirmed\",",
									"                    \"OrderRejected\"",
									"                ]",
									"            },",
									"             \"message\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"creationDate\": {",
									"                \"type\": \"string\",",
									"                \"format\": \"date-time\"",
									"            }",
									"        },",
									"        \"required\": [\"type\", \"message\", \"creationDate\"]",
									"    }",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.test(\"Initially should not be any notifications\", function() {",
									"    pm.expect(responseJSON).to.eql([]);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notification/api/v1/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"api",
								"v1",
								"notifications"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"type\": \"OrderConfirmed\",\n  \"message\": \"sit\",\n  \"creationDate\": \"1983-05-14T17:08:27.504Z\"\n },\n {\n  \"type\": \"OrderRejected\",\n  \"message\": \"sint est voluptate esse\",\n  \"creationDate\": \"1951-10-24T01:29:46.393Z\"\n }\n]"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 49007638,\n \"message\": \"non\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 49007638,\n \"message\": \"non\"\n}"
						}
					]
				},
				{
					"name": "Create affordable order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\"",
									"        }",
									"    },",
									"    \"required\": [\"id\"]",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.collectionVariables.set(\"orderId\", responseJSON[\"id\"])"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"price\", pm.variables.replaceIn('{{$randomPrice}}'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"price\": {{price}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/v1/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"v1",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"price\": 89087069.42\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"urn:uuid:b6a45308-b64a-5865-cb83-8527e8e5d575\"\n}"
						},
						{
							"name": "rejected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"price\": 89087069.42\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -21872015,\n \"message\": \"irure nisi\"\n}"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"price\": 89087069.42\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -21872015,\n \"message\": \"irure nisi\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"price\": 89087069.42\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -21872015,\n \"message\": \"irure nisi\"\n}"
						}
					]
				},
				{
					"name": "Get order information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"id\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"uuid\"",
									"        },",
									"        \"price\": {",
									"            \"type\": \"number\"",
									"        },",
									"        \"creationDate\": {",
									"            \"type\": \"string\",",
									"            \"format\": \"date-time\"",
									"        }",
									"    },",
									"    \"required\": [\"id\", \"price\"]",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.test(\"Order information valid\", function() {",
									"    pm.expect(responseJSON[\"id\"]).to.eql(pm.collectionVariables.get(\"orderId\"));",
									"    pm.expect(responseJSON[\"price\"]).to.eql(parseFloat(pm.collectionVariables.get(\"price\")));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/order/api/v1/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"v1",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}",
									"description": "(Required) ID of order"
								}
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "urn:uuid:4cfa949b-009a-1a5a-e89c-b476c7e64359",
											"description": "(Required) ID of order"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"0d01af4a-84b2-9a48-579e-79f7acd9bca3\",\n \"price\": 16084202.99,\n \"creationDate\": \"1964-02-03T12:09:40.897Z\"\n}"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "urn:uuid:4cfa949b-009a-1a5a-e89c-b476c7e64359",
											"description": "(Required) ID of order"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -21872015,\n \"message\": \"irure nisi\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/order/:orderId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order",
										":orderId"
									],
									"variable": [
										{
											"key": "orderId",
											"value": "urn:uuid:4cfa949b-009a-1a5a-e89c-b476c7e64359",
											"description": "(Required) ID of order"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -21872015,\n \"message\": \"irure nisi\"\n}"
						}
					]
				},
				{
					"name": "Changed account status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"amount\": {",
									"            \"type\": \"number\"",
									"        }",
									"    },",
									"    \"required\": [\"amount\"]",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.test(\"Account amount reduced to order price\", function() {",
									"    var expectedPrice = parseFloat(pm.collectionVariables.get(\"accountAmount\"))-parseFloat(pm.collectionVariables.get(\"price\"));",
									"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(expectedPrice.toFixed(2)));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/billing/api/v1/account",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"api",
								"v1",
								"account"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"amount\": 68993046.62\n}"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						}
					]
				},
				{
					"name": "Check user notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"type\": {",
									"                \"type\": \"string\",",
									"                \"enum\": [",
									"                    \"OrderConfirmed\",",
									"                    \"OrderRejected\"",
									"                ]",
									"            },",
									"             \"message\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"creationDate\": {",
									"                \"type\": \"string\",",
									"                \"format\": \"date-time\"",
									"            }",
									"        },",
									"        \"required\": [\"type\", \"message\", \"creationDate\"]",
									"    }",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.test(\"Should be one 'OrderConfirmed' notification\", function() {",
									"    pm.expect(responseJSON.length).to.eql(1);",
									"    var n = responseJSON[0]",
									"    pm.expect(n[\"type\"]).to.eql(\"OrderConfirmed\")",
									"    pm.expect(n[\"message\"].includes(pm.collectionVariables.get(\"orderId\"))).to.eql(true);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notification/api/v1/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"api",
								"v1",
								"notifications"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"type\": \"OrderConfirmed\",\n  \"message\": \"sit\",\n  \"creationDate\": \"1983-05-14T17:08:27.504Z\"\n },\n {\n  \"type\": \"OrderRejected\",\n  \"message\": \"sint est voluptate esse\",\n  \"creationDate\": \"1951-10-24T01:29:46.393Z\"\n }\n]"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 49007638,\n \"message\": \"non\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 49007638,\n \"message\": \"non\"\n}"
						}
					]
				},
				{
					"name": "Create unaffordable order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"price\": {{accountAmount}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/v1/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"v1",
								"order"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"price\": 89087069.42\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"urn:uuid:b6a45308-b64a-5865-cb83-8527e8e5d575\"\n}"
						},
						{
							"name": "rejected response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"price\": 89087069.42\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -21872015,\n \"message\": \"irure nisi\"\n}"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"price\": 89087069.42\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -21872015,\n \"message\": \"irure nisi\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"price\": 89087069.42\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"order"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": -21872015,\n \"message\": \"irure nisi\"\n}"
						}
					]
				},
				{
					"name": "Account status not changed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"        \"amount\": {",
									"            \"type\": \"number\"",
									"        }",
									"    },",
									"    \"required\": [\"amount\"]",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.test(\"Account amount not changed\", function() {",
									"    expectedPrice = parseFloat(pm.collectionVariables.get(\"accountAmount\"))-parseFloat(pm.collectionVariables.get(\"price\"));",
									"    pm.expect(responseJSON[\"amount\"]).to.eql(parseFloat(expectedPrice.toFixed(2)));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/billing/api/v1/account",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"api",
								"v1",
								"account"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"amount\": 68993046.62\n}"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/account",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"account"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 60777507,\n \"message\": \"velit ut deserunt in\"\n}"
						}
					]
				},
				{
					"name": "Check user notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"properties\": {",
									"            \"type\": {",
									"                \"type\": \"string\",",
									"                \"enum\": [",
									"                    \"OrderConfirmed\",",
									"                    \"OrderRejected\"",
									"                ]",
									"            },",
									"             \"message\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"creationDate\": {",
									"                \"type\": \"string\",",
									"                \"format\": \"date-time\"",
									"            }",
									"        },",
									"        \"required\": [\"type\", \"message\", \"creationDate\"]",
									"    }",
									"};",
									"",
									"pm.test('Response schema is valid', function() {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"var responseJSON = JSON.parse(responseBody)",
									"pm.test(\"Should be one 'OrderConfirmed' and one 'OrderRejected' notification\", function() {",
									"    pm.expect(responseJSON.length).to.eql(2);",
									"       ",
									"    var n1 = responseJSON[0]",
									"    pm.expect(n1[\"type\"]).to.eql(\"OrderConfirmed\")",
									"    pm.expect(n1[\"message\"].includes(pm.collectionVariables.get(\"orderId\"))).to.eql(true);",
									"",
									"    var n2 = responseJSON[1]",
									"    pm.expect(n2[\"type\"]).to.eql(\"OrderRejected\")    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Auth-Token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDA5NDQ4NjgsInVpZCI6IjVjZTcyYWNkLWYzNGYtNGM4Mi1iZGY0LWZmZjg4ZDEwYmRhZiIsImxvZ2luIjoiT2xpbi5XZWhuZXI3In0.F6Wx7TodBO-E51VuVrF22Xm3OSIzMmkVA7YCAiUKvhE",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notification/api/v1/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"api",
								"v1",
								"notifications"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"type\": \"OrderConfirmed\",\n  \"message\": \"sit\",\n  \"creationDate\": \"1983-05-14T17:08:27.504Z\"\n },\n {\n  \"type\": \"OrderRejected\",\n  \"message\": \"sint est voluptate esse\",\n  \"creationDate\": \"1951-10-24T01:29:46.393Z\"\n }\n]"
						},
						{
							"name": "forbidden response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 49007638,\n \"message\": \"non\"\n}"
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"notifications"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 49007638,\n \"message\": \"non\"\n}"
						}
					]
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/api/v1/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": [
						{
							"name": "successfull response",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"logout"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"logout"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"code\": 7570250,\n \"message\": \"ad dolor\"\n}"
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"logWithIndent = function(str, indent) {",
					"    fixedStr = ''",
					"    for (const ln of str.split(\"\\n\"))",
					"    {",
					"        if (fixedStr != '')",
					"        {",
					"            fixedStr += \"\\n\" + indent",
					"        }",
					"        fixedStr += ln",
					"    }",
					"    tests[fixedStr] = true",
					"}",
					"",
					"logWithIndent(\"Request params: \\n\" + (typeof request.data === 'string' ? request.data : ''), \"\\t\")",
					"logWithIndent(\"Response: \\n\" + responseBody, \"\\t\")"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework"
		},
		{
			"key": "login",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "phone",
			"value": ""
		},
		{
			"key": "login2",
			"value": ""
		},
		{
			"key": "password2",
			"value": ""
		},
		{
			"key": "userId2",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "accountAmount",
			"value": ""
		},
		{
			"key": "price",
			"value": ""
		},
		{
			"key": "retry",
			"value": ""
		}
	]
}